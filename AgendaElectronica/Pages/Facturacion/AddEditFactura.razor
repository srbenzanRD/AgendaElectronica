@page "/facturacion/crear"
<h3>Factura</h3>
<EditForm Model="request" OnValidSubmit="Send">
    @if (Message != null)
    {
        <div class="alert-danger">
            <span class="text-danger">@Message</span>
        </div>
    }
    @*Disenar el espacio para el cliente o contacto a facturarle*@
    <div class="input-group mb-3">
        <input 
               class="form-control"
               placeholder="Cliente"
               aria-label="Cliente"
               aria-describedby="button-addon2" list="contactos"
               @bind="Nombre"
               />
        <datalist id="contactos">
          @foreach (var contacto in Contactos)
            {
                <option value="@contacto.Nombre" @onclick="()=>BuscarSeleccionarCliente(contacto.Nombre)" />
            }
        </datalist>
        
        <button 
            class="btn btn-outline-success d-print-none"
            type="button" id="button-addon2"
        @onclick="async()=>{
        await CargarContacto(); }">
            <span class="oi oi-reload"></span>
        </button>
    </div>
    @*Disenar el espacio para los productos a facturar*@
    <div class="card p-2">
        <div class="card-header card-title">
            <h3 class="">¿Que desea el cliente?</h3>
        </div>
        <small class="p-2">Aquí puedes detallar lo que le cargaras a la factura al cliente...</small>
        <div class="input-group mb-3">
            <input class="form-control"
                   placeholder="Producto"
                   aria-label="Producto"
                   aria-describedby="button-addon2" list="productos"
                   @onchange="(value)=>{
                    var r = Productos.FirstOrDefault(p=>p.CodigoDescripcion == value.Value!.ToString());
                    if(r!=null)
                    BuscarPercio(r.Id);
                    }"
                   />
            <datalist id="productos">
                @foreach (var producto in Productos)
                {
                    <option value="@producto.CodigoDescripcion" @onclick="()=>BuscarPercio(producto.Id)" />
                }
            </datalist>
            
            <button class="btn btn-outline-success d-print-none"
                    type="button" id="button-addon2"
            @onclick="async()=>{
        await CargarProducto(); }">
                <span class="oi oi-reload"></span>
            </button>
            
        </div>
        <div class="input-group mb-3">
            <span class="form-control w-50">
                $@Precio.ToString("N2")
            </span>
            <input class="form-control w-25" type="number" @bind="@Cantidad" />
            <button class="btn btn-success d-print-none"
                    type="button" id="button-addon2"
            @onclick="AgregarAlDetalle">
                <span class="oi oi-collapse-down"></span>
            </button>
        </div>
    </div>
    @*Disenar los elementos que se cargan a la factura*@
    <h5>Detalle de la factura</h5>
    <table class="table">
        <thead>
            <tr>
                <th class="col w-25">
                    Cantidad
                </th>
                <th>Descripcion</th>
                <th class="col w-25">
                    Precio
                    </th>
                <th class="col w-25">
                    SubTotal
                </th>
                <th>
                    ...
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detalle in request.Detalles)
            {
                <tr>
                    <td class="col w-25 text-center">
                        <InputNumber 
                            class="form-control" 
                            @bind-Value="@detalle.Cantidad" />
                    </td>
                    <td class="col w-100">
                        @detalle.Descripcion
                     </td>
                    <td class="col w-25">
                        @detalle.Precio.ToString("C2")
                     </td>
                    <td class="col w-25">
                        @detalle.SubTotal.ToString("C2")
                    </td>
                    <td>
                        <button 
                            type="button"
                            class="btn btn-outline-danger"
                        @onclick="()=>EliminarDetalle(detalle.ProductoId)">
                    <span 
                        class="oi oi-trash">

                    </span>
                    </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="card mb-3 p-3">
        <h5 class="card-header">Resumen</h5>
        <div class="card-body">
            <label>Total:</label>
            @request.SubTotal.ToString("C2")
            <div class="mb-3">
                <button 
                    class="btn btn-success" 
                    type="submit">
                    Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>
@code {
    public string? Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public List<ContactoResponse> Contactos { get; set; } = new List<ContactoResponse>();
    public List<ProductoResponse> Productos { get; set; } = new List<ProductoResponse>();
    public FacturaRequest request { get; set; } = new FacturaRequest();
    public decimal Precio { get; set; } = 0;
    public int Cantidad { get; set; } = 1;
    public int IdProducto { get; set; } = 0;
    void BuscarPercio(int idProducto)
    {
        Precio = Productos.FirstOrDefault(p => p.Id == idProducto)!.Precio;
        IdProducto = idProducto;
    }
    void BuscarSeleccionarCliente(string Contacto)
    {
        var c = Contactos.FirstOrDefault(p => p.Nombre == Contacto)!;
        if (c != null) request.ContactoId = c.Id;
    }
    void EliminarDetalle(int Id)
    {
        var detalle = request.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        if (detalle != null)
        {
            request.Detalles.Remove(detalle);
        }
    }
    void AgregarAlDetalle()
    {
        var r = Productos.FirstOrDefault(p => p.Id ==IdProducto);
        var detalle = request.Detalles.FirstOrDefault(d => d.ProductoId == IdProducto);
        if (detalle != null)
        {
            detalle.Cantidad += Cantidad;
        }
        else
        {
            request.Detalles.Add(new()
                {
                    ProductoId = IdProducto,
                    Descripcion = r!.Descripcion,
                    Precio = r.Precio,
                    Cantidad = Cantidad
                });
        }
    }
    async Task CargarContacto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await contactoServices.Consultar("");
        if (r.Success)
        {
            Contactos = r.Data!;
        }
    }
    async Task CargarProducto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await productoServices.Consultar("");
        if (r.Success)
        {
            Productos = r.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarContacto();
        await CargarProducto();
    }
    async Task Send()
    {
        BuscarSeleccionarCliente(Nombre);
        var result = await
        facturaServices.Crear(request);
        if (result.Success)
        {
            //navigator.NavigateTo("/facturacion");
            Message = result.Message;
        }
        else Message = result.Message;

    }
}
